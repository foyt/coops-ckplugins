/*! CKEditor plugin coops-dmp - v0.1.0 - 2016-02-08
* https://github.com/foyt/coops-ckplugins
* Copyright (c) 2016 ; Licensed LGPL-v3 */
(function(){DmpDifferenceAlgorithm=CKEDITOR.tools.createClass({$:function(a){if("undefined"==typeof diff_match_patch)throw new Error("diff_match_patch is missing");if("undefined"==typeof Fmes)throw new Error("Fmes is missing");if("undefined"==typeof hex_md5)throw new Error("hex_md5 is missing");this._editor=a,this._pendingPatches=[],this._contentCooldownTime=200,this._contentCoolingDown=!1,a.on("CoOPS:SessionStart",this._onSessionStart,this)},proto:{getName:function(){return"dmp"},_createChecksum:function(a){return hex_md5(a)},_removeLineBreaks:function(a){return(a||"").replace(/\n/g,"")},_onSessionStart:function(a){this._diffMatchPatch=new diff_match_patch,this._fmes=new Fmes,this._editor.on("CoOPS:ContentDirty",this._onContentDirty,this),this._editor.on("CoOPS:PatchReceived",this._onPatchReceived,this),this._editor.on("CoOPS:RevertedContentReceived",this._onRevertedContentReceived,this)},_emitContentPatch:function(a,b){var c=this._diffMatchPatch.diff_main(a,b);this._diffMatchPatch.diff_cleanupEfficiency(c);var d=this._diffMatchPatch.patch_toText(this._diffMatchPatch.patch_make(a,c));this._editor.fire("CoOPS:ContentPatch",{patch:d,oldContent:a,newContent:b})},_onContentDirty:function(a){this._emitContentPatch(a.data.savedContent,a.data.unsavedContent)},_applyChanges:function(a){var b=this._editor.getCoOps().getUnsavedContent();if(b)try{var c=document.implementation.createHTMLDocument(""),d=document.implementation.createHTMLDocument("");c.documentElement.innerHTML=this._editor.dataProcessor.toHtml(b),d.documentElement.innerHTML=this._editor.dataProcessor.toHtml(a);var e=this._fmes.diff(c,d);if((new InternalPatch).apply(this._editor.document.$,e),this._editor._.data=this._editor.dataProcessor.toHtml(this._editor.document.getBody().$.innerHTML),"development"===this._editor.config.coops.mode){var f=this._createChecksum(a),g=this._editor.getCoOps().getUnsavedContent(),h=this._createChecksum(g);if(f!==h)throw this._editor.getCoOps().log(["Patching Failed",a,g]),new Error("Patching failed")}}catch(i){this._editor.getCoOps().log(["DiffXmlJs patching failed",a]),this._editor.setData(a)}else this._editor.setData(a)},_lockEditor:function(){var a=this._editor.document.getBody();a.isReadOnly()?a.data("was-readonly",1):a.data("cke-editable",1),this._editor.getChangeObserver().pause()},_unlockEditor:function(){var a=this._editor.document.getBody();a.data("was-readonly")?a.data("was-readonly",!1):a.data("cke-editable",!1),this._editor.getChangeObserver().reset(),this._editor.getChangeObserver().resume()},_isPatchApplied:function(a){for(var b=0,c=a[1].length;c>b;b++)if(!a[1][b])return!1;return!0},_threeWayMerge:function(a,b,c){var d=this._diffMatchPatch.patch_make(a,c);return this._diffMatchPatch.patch_apply(d,b)},_applyPatch:function(a,b,c){this._editor.document.$.normalize();var d=this._editor.getCoOps().getSavedContent(),e=this._diffMatchPatch.patch_fromText(a),f=this._diffMatchPatch.patch_apply(e,d);if(this._isPatchApplied(f)){var g=this._removeLineBreaks(f[0]),h=this._createChecksum(g);if(b!==h)this._editor.getCoOps().log("Reverting document because checksum did not match"),this._editor.getCoOps().log(["remotePatchedChecksum:",h]),this._editor.getCoOps().log(["patchChecksum:",b]),this._editor.getCoOps().log(["patch:",a]),this._editor.getCoOps().log(["savedContent:",d]),this._editor.getCoOps().log(["remotePatchedText:",g]),this._editor.fire("CoOPS:ContentRevert");else{var i=this._editor.getCoOps().getUnsavedContent();if(g===i)this._editor.getCoOps().log("Local version equals remotely patched version, no need to apply the patch"),this._editor.fire("CoOPS:PatchApplied",{content:i});else if(this._editor.getCoOps().isLocallyChanged()){this._editor.getCoOps().log("Applying patch into dirty content, three way merge is required");var j=this._threeWayMerge(d,i,g);if(this._isPatchApplied(j)||(this._editor.getCoOps().log("Patch merging failed. Trying another way around"),j=this._threeWayMerge(d,g,i)),this._isPatchApplied(j)){var k=this._removeLineBreaks(j[0]);this._applyChanges(k),this._editor.fire("CoOPS:PatchMerged",{patched:g,merged:k})}else this._editor.getCoOps().log("Patch merging failed, reverting local changes"),this._applyChanges(g),this._editor.fire("CoOPS:PatchApplied",{content:g})}else this._editor.getCoOps().log("Applying patch"),this._applyChanges(g),this._editor.fire("CoOPS:PatchApplied",{content:g})}}else this._editor.getCoOps().log("Reverting document because could not apply the patch"),this._editor.fire("CoOPS:ContentRevert")},_applyNextPatch:function(){if(this._pendingPatches.length>0){this._lockEditor();var a=this._pendingPatches.shift();this._applyPatch(a.patch,a.patchChecksum,a.revisionNumber),this._applyNextPatch()}else this._unlockEditor()},_onPatchReceived:function(a){var b=a.data.patch,c=a.data.checksum,d=a.data.revisionNumber;b&&c&&this._pendingPatches.push({patch:b,patchChecksum:c,revisionNumber:d}),this._applyNextPatch()},_onRevertedContentReceived:function(a){var b=a.data.content;this._applyChanges(b),this._editor.fire("CoOPS:ContentReverted",{content:b})}}}),CKEDITOR.plugins.add("coops-dmp",{requires:["coops"],init:function(a){a.on("CoOPS:BeforeJoin",function(a){a.data.addAlgorithm(new DmpDifferenceAlgorithm(a.editor))})}})}).call(this);